// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  email         String   @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  role        String?
  banned      Boolean?
  banReason   String?
  banExpires  DateTime?
  isAnonymous Boolean?
  sessions    Session[]
  accounts    Account[]
  employee    Employee?

  @@map("user")
}

model Employee {
  id         String @id @default(cuid())
  userId     String @unique
  employeeId String @unique
  department String

  createdAt DateTime?
  updatedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employee")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum MachineStatus {
  OPERASIONAL
  LOCKED_OUT
  ZERO_OK
  REPAIR
}

enum EnergyType {
  ELECTRICAL
  PNEUMATIC
  HYDRAULIC
  MECHANICAL
  OTHER
}


model Machine {
  id          String         @id @default(cuid())
  code        String         @unique
  name        String
  location    String?
  status      MachineStatus  @default(OPERASIONAL)
  procedures  Json?                    
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  description String?
  lastActivity DateTime?

  points      IsolationPoint[]
  actions     ActionLog[]

  @@index([status])

  @@map("machine")
}

model IsolationPoint {
  id          String     @id @default(cuid())
  machineId   String
  label       String               
  energyType  EnergyType
  details     String?

  machine     Machine    @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId])
  @@unique([machineId, label])     

  @@map("isolation_point")
}

model ActionLog {
  id          String         @id @default(cuid())
  machineId   String
  fromStatus  MachineStatus
  toStatus    MachineStatus
  byName      String                    
  at          DateTime       @default(now())
  note        String?
  photoUri    String?                    
  payload     Json?                      

  machine     Machine        @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@index([machineId, at])
  @@index([toStatus])

  @@map("action_log")
}
