import { ORPCError, type RouterClient } from "@orpc/server";\nimport { UTApi, UTFile } from "uploadthing/server";\nimport z from "zod";\nimport { publicProcedure } from "../lib/orpc";\nimport { authRouter } from "./auth.router";\nimport { lotoRouter } from "./loto.router";\nimport { machineRouter } from "./machine.router";\n\nconst utapi = new UTApi();\n\nexport const appRouter = {\n  healthCheck: publicProcedure.handler(() => {\n    return {\n      status: "ok",\n    };\n  }),\n  auth: authRouter,\n  upload: publicProcedure\n    .input(\n      z.object({\n        file: z.object({\n          name: z.string().min(1),\n          dataUrl: z.string().min(1),\n        }),\n      }),\n    )\n    .handler(async ({ input }) => {\n      try {\n        // Expect data URL: data:<mime>;base64,<data>\n        const { name, dataUrl } = input.file;\n        const match = /^data:([^;]+);base64,/.exec(dataUrl);\n        const mime = match?.[1] || "application/octet-stream";\n        const commaIdx = dataUrl.indexOf(",");\n        const base64 = commaIdx >= 0 ? dataUrl.slice(commaIdx + 1) : dataUrl;\n        const buffer = Buffer.from(base64, "base64");\n        const file = new UTFile([buffer], name, { type: mime });\n        const result = await utapi.uploadFiles(file);\n\n        console.log(result);\n        return {\n          status: "success",\n          data: result,\n        };\n      } catch (error) {\n        console.error(error);\n        throw new ORPCError("INTERNAL_SERVER_ERROR", {\n          message: "Gagal mengunggah file",\n        });\n      }\n    }),\n  loto: lotoRouter,\n  machine: machineRouter,\n};\n\nexport type AppRouter = typeof appRouter;\nexport type AppRouterClient = RouterClient<typeof appRouter>;\n